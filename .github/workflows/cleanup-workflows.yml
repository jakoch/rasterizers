#
# .github/workflows/cleanup-workflows.yml
#
# SPDX-FileCopyrightText: 2021 Ching Chow.
# SPDX-FileCopyrightText: 2021-2025 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0

name: "✂ Clean Workflow Runs"

on:
  # This workflow runs at 00:00 daily.
  schedule:
  - cron: '0 0 * * *'  # GMT
  # You can manually run this workflow.
  workflow_dispatch:

jobs:

# ---------------------------------------------------------------------------------------

  cleanup-workflows:

# ---------------------------------------------------------------------------------------

    name: "Cleanup Workflows"
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: ✂ Remove cancelled or skipped workflow runs
        uses: actions/github-script@v7 # https://github.com/actions/github-script
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cancelled = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              status: 'cancelled'
            });
            const skipped = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              status: 'skipped'
            });
            for (const response of [cancelled, skipped]) {
              for (const run of response.data.workflow_runs) {
                console.log(`[Deleting] Run id ${run.id} of '${run.name}' is a cancelled or skipped run.`);
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }
      - name: ✂ Remove 7 days old workflows runs
        uses: actions/github-script@v7 # https://github.com/actions/github-script
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const days_to_expiration = 7;
            const ms_in_day = 86400000;
            const now = Date.now();
            const pages = 5;
            // list the workflows runs to remove here
            const workflows = [
              'build-mesa.yml',
              'build-swiftshader.yml'
            ]
            let runs_to_delete = [];
            for (const workflow of workflows) {
              for (let page = 0; page < pages; page += 1) {
                const response = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflow,
                  page: page,
                  per_page: 100
                });
                if (response.data.workflow_runs.length > 0) {
                  for (const run of response.data.workflow_runs) {
                    if (now - Date.parse(run.created_at) > ms_in_day * days_to_expiration) {
                      runs_to_delete.push([run.id, run.name]);
                    }
                  }
                }
              }
            }
            for (const run of runs_to_delete) {
              console.log(`[Deleting] Run id ${run[0]} of '${run[1]}' is older than ${days_to_expiration} days.`);
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run[0]
                });
              } catch (error) {
                // ignore errors
              }
            }
      - name: ✂ Remove runs of the cleanup workflow itself
        uses: actions/github-script@v7 # https://github.com/actions/github-script
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pages = 5;
            let runs_to_delete = [];
            for (let page = 0; page < pages; page += 1) {
              const response = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'cleanup-workflows.yml',
                page: page,
                per_page: 100
              });
              if (response.data.workflow_runs.length > 0) {
                for (const run of response.data.workflow_runs) {
                  runs_to_delete.push([run.id, run.name]);
                }
              }
            }
            for (const run of runs_to_delete) {
              console.log(`[Deleting] Run id ${run[0]} of '${run[1]}'.`);
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run[0]
                });
              } catch (error) {
                // ignore errors
              }
            }
      - name: ✂ Remove Dependabot workflow runs
        uses: actions/github-script@v7 # https://github.com/actions/github-script
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pages = 5;
            let runs_to_delete = [];
            for (let page = 0; page < pages; page += 1) {
              const response = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                actor: 'dependabot[bot]',
                page: page,
                per_page: 100,
              });
              if (response.data.workflow_runs.length > 0) {
                for (const run of response.data.workflow_runs) {
                  if (run.triggering_actor?.login === 'dependabot[bot]') {
                    runs_to_delete.push([run.id, run.name]);
                  }
                }
              }
            }
            for (const run of runs_to_delete) {
              console.log(`[Deleting] Run id ${run[0]} of '${run[1]}'.`);
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run[0]
                });
              } catch (error) {
                // ignore errors
              }
            }
